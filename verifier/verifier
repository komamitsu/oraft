#!/usr/bin/env ruby

require 'logger'
require 'time'
require 'parallel'
require 'faraday'
require 'securerandom'
require 'optparse'

$logger = Logger.new(STDOUT)
STDOUT.sync = true
$logger.formatter = proc {|level, datetime, progname, msg| "#{datetime.strftime '%FT%T.%NZ'} #{level} #{msg}\n"}
$logger.level = Logger::DEBUG

class Error
  def initialize
    @last_ts = nil
    @count = 0
    @monitor = Monitor.new
  end

  def stalled?
    @monitor.synchronize do
      if @last_ts && Time.now - 2 < @last_ts
        if @count > 8
          return true
        end
      else
        @last_ts = nil
        @count = 0
      end
    end

    return false
  end

  def incr
    @monitor.synchronize do
      @last_ts = Time.now
      @count += 1
    end
  end

  def reset
    @monitor.synchronize do
      @last_ts = nil
      @count = 0
    end
  end
end

class Verifier
  RETRY = 128

  def initialize(concurrency, key_size, count, wait_ms)
    @concurrency = concurrency
    @key_size = key_size
    @count = count
    @wait_ms = wait_ms
    @clients = 1.upto(5).map do |i|
      Faraday.new("http://localhost:818#{i}", request: {
        open_timeout: 1.0,
        timeout: 2.0
      })
    end
    @errors = @clients.inject({}) {|a, x|
      a[x] = Error.new
      a
    }
    @expected_kvs = {}
  end

  def wait(init_wait, retry_factor, max_wait, retry_count)
    # Add plus/minus 10% jitter
    sleep([init_wait * (retry_factor ** retry_count), max_wait].min * (1.1 - Random.rand(0.2)))
  end

  def throw_exception(msg)
    ex = Exception.new(msg)
    $logger.error(ex)
    raise ex
  end

  def send_command(label, request_id, command, client = nil)
    RETRY.times.each do |i|
      client ||= @clients[Random.rand(5)]
      error = @errors[client] 
      if error.stalled?
        $logger.warn "[#{label}] This client may be stalled. Trying another one... client=#{client.url_prefix}, command='#{command}'"
        client = nil
        next
      end

      $logger.debug "[#{label}] client=#{client.url_prefix}, command='#{command}'"

      begin
        response = client.post("/command", "#{request_id || SecureRandom.uuid} #{command}")
        error.reset
      rescue Faraday::ConnectionFailed, Faraday::TimeoutError, Net::ReadTimeout
        $logger.warn "[#{label}] Network error: command='#{command}', exception=#{$!}"
        client = nil
        error.incr
        wait(0.1, 2, 1.5, i)
        next
      end

      case response.status
      when 0...200
        throw_exception("[#{label}] Unexpected response: response.status=#{response.status}, command='#{command}', error=#{response.body}")
      when 200...300
        $logger.debug "[#{label}] Success! command='#{command}', result='#{response.body}'"
        return response.body
      when 400
        throw_exception("[#{label}] Bad Request: command='#{command}', error=#{response.body}")
      when 404
        throw_exception("#{label}] Not Found: command='#{command}', error=#{response.body}")
      when 409
        $logger.warn "[#{label}] Conflict: command='#{command}', error=#{response.body}"
        # Conflict
        return nil
      else # >= 500
        $logger.warn "[#{label}] Temporary error: response.status=#{response.status}, command='#{command}', error=#{response.body}"
        client = nil
        wait(0.1, 2, 1.5, i)
        next
      end
    end

    throw_exception("[#{label}] Retry over (HTTP response): command='#{command}'")
  end

  def key(i)
    "key-#{i % @key_size}"
  end

  def run
    initialize_values

    update_values

    verify_values
  end
end

class IncrementVerifier < Verifier
  def initialize_values
    @key_size.times.each do |i|
      k = key(i)
      send_command("set-#{i}", nil, "SET #{k} 0")
      @expected_kvs[k] = 0
    end
  end

  def update_values
    Parallel.each(0...@count, :in_threads => @concurrency) do |i|
      sleep(@wait_ms / 1000.0)
      retry_count = 0
      diff = Random.rand(100000)
      loop do
        request_id = "update-#{i}"
        label = "update-#{i}-#{retry_count}"
        if retry_count >= RETRY
          throw_exception("[#{label}] Retry over (INCR): i='#{i}'")
        end

        k = key(i)
        $logger.debug "[#{label}] diff=#{diff}"

        if send_command(label, request_id, "INCR #{k} #{diff}")
          @expected_kvs[k] += diff
          $logger.debug "[#{label}] updated #{k}: expected_kvs=#{@expected_kvs[k]}"
          break
        end

        wait(0.1, 2, 1.5, retry_count)
        retry_count += 1
      end
    end
  end

  def verify_values
    $logger.info "================================================================================"
    $logger.info "Result"
    $logger.info "--------------------------------------------------------------------------------"
    failed = 0
    @key_size.times.each do |i|
      k = key(i)
      $logger.info "Key: #{k}"
      expected = @expected_kvs[k]
      @clients.each_with_index do |client, j|
        v = Integer(send_command("verify-#{i}-#{j}", nil, "GET #{k}", client))
        if v == expected
          $logger.info "Success: expected=#{expected}, actual=#{v}"
        else
          $logger.info "Failed:  expected=#{expected}, actual=#{v}"
          failed += 1
        end
      end
      $logger.info "--------------------------------------------------------------------------------"
    end

    $logger.info
    if failed == 0
      $logger.info "All good"
      true
    else
      $logger.info "Detected any failure: failed_count=#{failed}"
      false
    end
  end
end

class KeySetVerifier < Verifier
  def initialize_values
    # Assert
    unless @count == @key_size
      raise "@count and @key_size must be same. count:#{@count}, key_size:#{@key_size}"
    end
  end

  def update_values
    Parallel.each(0...@count, :in_threads => @concurrency) do |i|
      sleep(@wait_ms / 1000.0)
      retry_count = 0
      loop do
        request_id = "set-#{i}"
        label = "set-#{i}-#{retry_count}"
        value = i
        if retry_count >= RETRY
          throw_exception("[#{label}] Retry over (SET): i='#{i}'")
        end

        k = key(i)
        $logger.debug "[#{label}] Sending"

        if send_command(label, request_id, "SET #{k} #{value}")
          @expected_kvs[k] = value
          $logger.debug "[#{label}] updated #{k}: expected_kvs=#{@expected_kvs[k]}"
          break
        end

        wait(0.1, 2, 1.5, retry_count)
        retry_count += 1
      end
    end
  end

  def separator_line
    $logger.info "--------------------------------------------------------------------------------"
  end

  def verify_values
    $logger.info "================================================================================"
    $logger.info "Result"
    separator_line

    expected = @expected_kvs.keys.to_set
    raise "Expected keys length from KVS is wrong: expected_keys_len: #{@count}, keys_len_from_kvs: #{expected}" unless @count == expected.size

    checker = lambda do
      failed = 0
      @clients.each_with_index do |client, i|
        v = send_command("verify-#{i}", nil, "KEYS", client).split(',').to_set
        if v == expected
          $logger.info "Success: expected.size=#{expected.size}"
        else
          unexpected = v - expected
          missing = expected - v
          $logger.info "Failed:  unexpected=#{unexpected}, missing=#{missing}"
          failed += 1
        end
      end

      failed
    end


    failed = checker.call

    $logger.info
    if failed == 0
      $logger.info "All good"
      separator_line
      return true
    elsif failed <= (expected.size / 2)
      $logger.info "Detected a few failures: failed_count=#{failed}. But it's possible that one or two nodes hasn't applied latest entries. Let me check again..."
      sleep 5
      failed = checker.call
      if failed == 0
        $logger.info "All good"
        separator_line
        return true
      end
    end

    $logger.info "Detected too many failures: failed_count=#{failed}"
    separator_line
    return false
  end
end

if $0 == __FILE__
  options = {
    mode: :incr,
    concurrency: 8,
    key_size: 16,
    count: 2048,
    wait_ms: 400,
  }

  OptionParser.new do |opts|
    opts.on("-m", "--mode MODE", "Verification mode: (incr|set). The default is `incr`") do |v|
      raise "Unexpected value: #{v}" unless ['incr', 'set'].include?(v)
      options[:mode] = v.to_sym
    end

    opts.on("-C", "--concurrency CONCURRENCY. The default is 8", "Concurrency") do |v|
      options[:concurrency] = Integer(v)
    end

    opts.on("-k", "--key-size KEY_SIZE. The default is 16", "Key size") do |v|
      options[:key_size] = Integer(v)
    end

    opts.on("-c", "--count COUNT. The default is 2048", "Count") do |v|
      options[:count] = Integer(v)
    end

    opts.on("-w", "--wait-ms WAIT_MS. The default is 400", "Wait (ms)") do |v|
      options[:wait_ms] = Integer(v)
    end

  end.parse!

  verifier = case options[:mode]
  when :incr
    IncrementVerifier.new(
      options[:concurrency],
      options[:key_size],
      options[:count],
      options[:wait_ms])
  when :set
    KeySetVerifier.new(
      options[:concurrency],
      options[:key_size],
      options[:count],
      options[:wait_ms]
    )
  else
    raise "Unexpected mode: #{options[:mode]}"
  end

  if verifier.run
    exit 0
  else
    exit 1
  end
end

